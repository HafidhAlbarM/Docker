----------------------------------------------- IMAGE
--membuat image file
docker build .

--melihat semua image
docker images

--membuat image dengan detach mode
docker run -p 3000:80 -d id_image_nya

--menghapus image
docker rmi id_image_nya

--menghapus multiple image
docker rmi id_image_1 id_image_2 id_image_3

--melihat detail image
docker image inspect id_image_nya

--memberi nama(tag) image
docker build -t nama-image:tag-image .

--mengubah nama(tag) image agar bisa di push ke docker hub
docker tag nama-image-lama:tag-image username/nama-image-baru

--menghapus semua images di local
docker image prune -a

----------------------------------------------- CONTAINER

--melihat container yg aktif
docker ps

--melihat semua container 
docker ps -a

--menjalankan container
docker run -p 3000:80 id_image_nya

--memulai container
docker start nama_container

--menghentikan container
docker stop nama_container

--attach(melihat log) container yg sedang berjalan
docker attach nama_container

--menghapus container 
docker rm nama_container

--melihat semua log di container yg sudah di memulai
docker logs nama_container

--attach(melihat log) container yg sedang berjalan
docker logs -f nama_container

--membuat & menjalankan container dengan mode interaktif & menampilkan command (bisa interaktif di cmd)
docker run -it id_image_nya

--menjalankan container dengan mode interaktif & dan attatch mode(hampir sama dengan di atas)
docker start -a -i nama_container_nya

--menjalankan container dengan detach mode & otomatis terhapus containernya ketika berhenti
docker run -p 3000:80 -d --rm id_image_nya

----------------------------------------------- COPY FILE, TETAPI COPY FILE TIDAK DI SARANKAN

--mengcopy file dari local directory ke dalam container yg berjalan (cp)
docker cp nama_folder_local/nama_file_local nama_container:/nama_folder_container
docker cp nama_folder_local/. nama_container:/nama_folder_container

--mengcopy file dari container yg berjalan ke local directory
docker cp nama_container:/nama_folder_container nama_folder_local

--memberi nama container (--name)
docker run -p 3000:80 -d --rm --name nama_container id_image
docker run -p 3000:80 -d --rm --name nama_container nama_image

----------------------------------------------------------------------------
--Push image docker ke Docker Hub
docker push username/nama-repository

--Pull image dari Docker Hub
docker pull username/nama-repository


----------------------------------------------- VOLUMES

Volume adalah penyimpanan di dalam container
--melihat volumes
docker volume ls

--Anonymous volume
--Terikat dalam contaier
--Anonymous volume adalah volume yg akan terhapus oleh docker ketika container di hapus (-v --rm)
--Anonymous volume masih ada jika container hanya di stop
--Anonymous volume bisa di pakai utk node_modules pada node js
--line "VOLUME ["/app/feedback"]" pada .dockerfile hanya untuk dokumentasi
docker run -d -p 3000:80 --rm --name feedback-app -v /app/feedback feedback-node:volumes

--Named Volume
--Tidak terikat dalam contaier
--membuat volume yg tidak akan dihapus oleh docker ketika container di hapus (-v --rm)
--bisa berbagi data antar container
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes

--Bind Mounts
--Tidak terikat dalam contaier (menyimpan data di host file system, sehingga ada perubahan apapun dalam kode, langusng berubah)
--Bind mount tidak akan terhapus walau container mati/terhapus
--bisa berbagi data antar container
--Menjalankan container dengan bind mounts (di Mac/Linux)
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "C:\Users\Hasbiallah\Documents\Docker\4_data-volumes-01-starting-setup:/app" feedback-node:volumes

--menjalankan container dengan bind mount (di Windows menggunakan Power Shell)
docker run -d -p 3000:80 --name feedback-app -v feedback:/app/feedback -v ${PWD}:/app feedback-node:volumes

--mengkombinasikan bind mount & volume (di Windows menggunakan Power Shell)
docker run -d --rm -p 3000:80 --name feedback-app -v feedback:/app/feedback -v ${PWD}:/app -v /app/node_modules feedback-node:volumes

--tambahkan kode dalam package.json agar dapat melihat perubahan log di windows
"scripts": {
    "start": "nodemon -L server.js"
  }

--membuat Read Only Volume (menambahkan ":ro" (read only) di bind mount)
--utk mencegah antisipasi agar tidak merubah file kodingan asli di local kita
docker run -d --rm -p 3000:80 --name feedback-app -v feedback:/app/feedback -v ${PWD}:/app:ro -v /app/temp -v /app/node_modules feedback-node:volumes
**ada bug saat create file dengan ":ro", ketika kita mendefinisikan folder node_modules jadi read only, docker gabisa write file ke node_module folder, jadi cara penyelesaiannya, di run dulu tanpa ":ro", terus di hapus lg containernya, terus di run lagi pake ":ro", atau buat folder node_module manual terlebih dahulu

--run container dengan environtment variable di command (--env)
docker run -d --rm -p 3000:8000 --env PORT=8000 --name feedback-app -v feedback:/app/feedback -v ${PWD}:/app -v /app/node_modules feedback-node:volumes

--run container dengan multiple environtment variable di command (--env)
docker run -d --rm -p 3000:8000 --env PORT=8000 --env API_KEY=http://www.website.com/api --name feedback-app -v feedback:/app/feedback -v ${PWD}:/app -v /app/node_modules feedback-node:volumes

--run container dengan membaca environtment variable di .env file (--env-file)
docker run -d --rm -p 3000:80 --env-file ./.env --name feedback-app -v feedback:/app/feedback -v ${PWD}:/app -v /app/node_modules feedback-node:volumes

----------------------------------------------- KONEK KE DATABASE
tambahkan ini untuk koneksi dari docker app ke local database (host.docker.internal:)
mongodb://host.docker.internal:27017/swfavorites

--konesi untuk terhubung dari docker app container ke alamat IP local komputer (host.docker.internal)
mongodb://host.docker.internal:27017/swfavorites 

--melihat alamat ip container
docker container inspect nama-container
Muncul JSON, cari NetworkSettings -> IPAddress

--koneksi menggunakan alamat ip container untuk komunikasi antar container,di dapat dari IP address container (docker container inspect mongodb)
mongodb://172.17.0.2:27017/swfavorites

----------------------------------------------- NETWORK
Mengelompokan beberapa container ke dalam suatu jaringan (issue IP Address)
Network harus dibuat terlebih dahulu

--membuat network
docker network create favorites-net
--menampilkan semua network
docker network ls

--menjalankan container dalam network
docker run -d --name mongodb-container --network favorites-net mongo
docker run -d --name aplikasi-container --network favorites-net -p 3000:3000 aplikasi-image

----------------------------------------------- REACT JS
Untuk membuat image React JS, Copy package-lock.json juga, kalau engga, nanti error ERR_SOCKET_TIMEOUT
I guess adding package-lock.json before tremendously reduces the time to download packages and it's dependencies. Jangan lupa bikin .dockerignore utk node_modules

'
FROM node:16

WORKDIR /app

COPY package.json .
COPY package-lock.json .

RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm","start"]

''

----------------------------------------------- Node, Mongo, React JS run docker
--membuat mongodb container
docker run --name mongodb-container -v dataMongo:/data/db --rm -d --network goals-net -e MONGO_INITDB_ROOT_USERNAME=hafidh -e MONGO_INITDB_ROOT_PASSWORD=password mongo

atau menggunakan env file
docker run --name mongodb-container -v dataMongo:/data/db --rm -d --network goals-net -e --env-file ./.env mongo

--membuat node js image
docker build -t goals-node .

--membuat node js container
docker run --name goals-backend --rm -d -p 3001:80 -v ${PWD}:/app -v logs:/app/logs -v /app/node_modules --network goals-net --env-file ./.env goals-node

--membuat react js container
docker run --name goals-frontend -v ${PWD}:/app/src --rm -p 3000:3000 -it goals-react

----------------------------------------------- Docker Compose
-penulisan menggunakan tanda(-) jika key value pairs. Jika tidak, ga usah pakai tanda (-)
environment:
  MONGO_INITDB_ROOT_USERNAME: hafidh
  MONGO_INITDB_ROOT_PASSWORD: password
env_file:
  - ./backend/.env

--Kalau pakai docker compose, sudah otomatis membuatkan network utk setiap list container yg dalam dalam file docker compose

--mengcompose docker compose (attach mode)
docker-compose up

--mengcompose docker compose (dettach mode)
docker-compose up -d

--menstop & menghapus container
docker-compose down

--menstop & menghapus container beserta volumenya
docker-compose down -v